// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWStructuredBuffer<float3> PositionResult;
RWStructuredBuffer<float4> ColorResult;
Texture2D<float4> inputTexture;

RWTexture2D<float4> Result;


int width, height;

float3 Texture2XYZ(uint3 id)
{
    float PI = 3.14159265358979323846f;
    float phi = (1 - id.x / (float) width) * 2 * PI - PI;
    float theta = PI - id.y / (float) height * PI;
    float r = 20;
    
    float x = r * sin(theta) * cos(phi);
    float y = r * cos(theta);
    float z = r * sin(theta) * sin(phi);
    
    return float3(x,y,z);

}
float2 Texture2poler(uint3 id)
{
    float PI = 3.14159265358979323846f;
    float phi = (1 - id.x / (float) width) * 2 * PI - PI;
    float theta = PI - id.y / (float) height * PI;
    float r = 20;
    
    float x = r * sin(theta) * cos(phi);
    float y = r * cos(theta);
    float z = r * sin(theta) * sin(phi);
    
    return float2(phi, theta);

}


[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!

    PositionResult[id.x + id.y * width] = Texture2XYZ(id); //Texture2XYZ(id);
    ColorResult[id.x + id.y * width] = inputTexture[id.xy];

    Result[id.xy] = ColorResult[id.x + id.y * width];

}


